#!/usr/bin/perl -w

# $Id: update-flavors,v 1.3 2004-03-19 21:53:31-08 kst Exp $
# $Source: /home/kst/CVS_smov/tools/gpt-wizard/update-flavors,v $

use strict;

use File::Basename ();

sub Get_Update_Flavors($);

die "Usage: package ...\n" if not @ARGV;
foreach my $arg (@ARGV) {
    print "${arg}:\n";
    my @flavors = Get_Update_Flavors $arg;
    print "    @flavors\n";
}

########################################################################

#
# This is a comparison function that implements a heuristic for the
# preferred order of flavors for update packages (since the last flavor
# specified determines the default executable).
#
# Non-MPI flavors are preferred over MPI flavors.
# Non-threaded flavors are preferred over threaded flavors
# Debug flavors are preferred over non-debug flavors.
# If equal, sort alphabetically.
#
sub By_Flavor {
    my $a_score = 0;
    my $b_score = 0;

    $a_score += 4 if $a !~ /mpi/;
    $a_score += 2 if $a !~ /pthr|solthr|sproc/;
    $a_score += 1 if $a !~ /dbg/;
    $b_score += 4 if $b !~ /mpi/;
    $b_score += 2 if $b !~ /pthr|solthr|sproc/;
    $b_score += 1 if $a !~ /dbg/;

    return $a_score <=> $b_score || $a cmp $b;
} # By_Flavor

# ----------------------------------------------------------------------

#
# Returns a list of flavors for the specified update package,
# determined by examining the output of gpt-query.
#
# A previous version of this function (see gpt-wizard revision 1.261)
# returned a list of two array references, one for nonstatic flavors
# and one for static flavors.  I've temporarily backed out this
# feature, since gpt-query doesn't always give sufficient information
# to determine this.
#
# See <https://bugzilla.ncsa.uiuc.edu/show_bug.cgi?id=46>.
#
sub Get_Update_Flavors($) {
    my($filename) = @_;

    my $module_name = File::Basename::basename $filename;
    #
    # File name format is name-version.tar.gz
    #
    $module_name =~ s/-[^-]*\.tar\.gz$//;

    my %is_flavor = ();

    open PIPE, "$ENV{GLOBUS_LOCATION}/sbin/gpt-query $module_name |";
    while (<PIPE>) {
        chomp;
        #
        # The gpt-query output format changed around gpt release 3.0.
        #

        next if not /ver:/ and not /pkg version:/;
        #
        # Strip leading whitespace and grab first word.
        #
        s/^\s*//;
        s/\s.*$//;
        #
        # e.g., "globus_openssl_module-gcc32dbg-dev".
        # Split on /-/ and grab next-to-last field.
        #
        my @fields = split /-/, $_;
        if (scalar @fields >= 2) {
            my $flavor = $fields[$#fields - 1];
            if ($flavor ne 'noflavor') {
                $is_flavor{$flavor} = 1;
            }
        }
    }
    close PIPE;

    my @flavors = sort By_Flavor keys %is_flavor;
    if (@flavors) {
        return @flavors;
    }
    else {
        die "Unable to determine flavors for $filename\n";
    }
} # Get_Update_Flavors

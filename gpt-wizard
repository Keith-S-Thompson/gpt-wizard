#!/usr/bin/perl -w

# $Id: gpt-wizard,v 1.61 2002-08-21 08:34:21-07 kst Exp $
# $Source: /home/kst/CVS_smov/tools/gpt-wizard/gpt-wizard,v $

#
# TO DO:
#
#     Start services other than GRIS (make it configurable).
#
#     May need to update lines in inetd.conf or files in xinetd.d
#     for services other than gsigatekeeper and gsiftp.
#
#     We warn about putting parts of Globus on local file
#     systems; consider automating this (?).
#
#     Automatically set up to report to one or more GIIS servers.
#     Configure this.
#
#     Accept ftp and http URLs for file names in config file.
#
#     Be smarter about tarballs.  Handle .tar, .tar.gz, .tgz,
#     .tar.bz2.  Auto-detect what tar can handle (check output
#     of "tar --help") and fall back to gzip/bzip2 and pipes.
#     (Particularly useful for non-Linux systems.)
#
#     Smarter handling of flavors for source installations,
#     particularly for vendorcc; see build-gt2.
#
#     Detect 64-bit machines other than ia64.
#     If it's configurable, configure it.
#

use strict;

use File::Basename ();
use Getopt::Long ();
use POSIX ();

sub Strip_Revision_String($);
sub Get_Config($);
sub Check_Config_Vars();
sub Get_System_Information();
sub Substitute($);
sub Elapsed_Time_Image($);
sub Time_Image($);
sub Make_Temp_File($);
sub Get_Result($$);
sub Execute(@);
sub Check_Services();
sub Die_Handler($);
sub Timestamp_Of($);
sub Backup($);
sub Test_File_Creation();
sub Inet_Config_Text($$);
sub Image($);
sub Debug(@);
sub Usage(@);

#
# Make warnings fatal.
#
$SIG{__WARN__} = sub { die @_ };

my $Prog_Name = File::Basename::basename $0;
my $Revision  = Strip_Revision_String '$Revision: 1.61 $';
my $Help      = undef;
my $Debugging = undef;
my $Cleanup   = 1;
my $Startup   = 1;
my @Opts = ( 'help'      => \$Help,
             'debugging' => \$Debugging,
             'cleanup!'  => \$Cleanup,
             'startup!'  => \$Startup );
Getopt::Long::GetOptions @Opts or Usage;
Usage if $Help;

$SIG{__DIE__} = \&Die_Handler;

my $temp_file_serial_number = 0;
my @manual_steps = ();

Usage if scalar @ARGV != 1;
my $Config_File = $ARGV[0];
my %Config = Get_Config $ARGV[0];
Check_Config_Vars();

my %Sys = Get_System_Information;
if ($Sys{OSNAME} ne 'linux') {
    die "Unsupported OS \"$Sys{OSNAME}\"\n";
}

Check_Services;

my @As_Root      =  qw(-time=5 -verbose -check);
my @As_Installer = (qw(-time=5 -verbose -check),
                    "-user=$Config{INSTALLER_USER}.$Config{INSTALLER_GROUP}");

my $CLK_TCK;
eval { $CLK_TCK = &POSIX::CLK_TCK };
if ($@) {
    $CLK_TCK = 100;
    # warn ">>> CLK_TCK not available, assuming 100\n";
}

if ($< != 0) {
    die ">>> $Prog_Name must be run as root\n";
}

$| = 1;

########################################################################
# Create a temporary working directory and set some variables.
########################################################################

print Time_Image time, "\n";
print "$Prog_Name revision $Revision processing ",
      "$Config_File $Config{CONFIG_FILE_REVISION}\n";

my @installer_pw = getpwnam $Config{INSTALLER_USER};
die ">>> No user $Config{INSTALLER_USER}\n" unless $#installer_pw >= 2;
my @installer_gr = getgrnam $Config{INSTALLER_GROUP};
die ">>> No group $Config{INSTALLER_GROUP}\n" unless $#installer_gr >= 2;
my $installer_uid = $installer_pw[2];
my $installer_gid = $installer_gr[2];
die ">>> installer_uid = $installer_uid\n" unless $installer_uid > 0;
# die ">>> installer_gid = $installer_gid\n" unless $installer_gid > 0;

$ENV{PATH} = $Config{PATH};
umask oct $Config{UMASK} or die "umask $Config{UMASK}: $!\n";

my $working_dir = "$Config{TEMP_DIR}/install-nmi-" . time . "-$$";
mkdir $working_dir or die "$working_dir: $!\n";
chown $installer_uid, $installer_gid, $working_dir
    or die "$working_dir: $!\n";
chmod 0700, $working_dir or warn "$working_dir: $!\n";
chdir $working_dir or die "$working_dir: $!\n";

########################################################################
# Install GPT
########################################################################

########################################
# Unpack the source tarball.  See what the tar command created.
# If there's exactly one new thing in the current directory, assume it's
# the extracted source directory.
########################################

opendir DIR, '.' or die ".: $!\n";
my @files_before = readdir DIR;
closedir DIR;
my %already_existed = map { $_ => 1 } @files_before;

Execute @As_Installer, 'tar', 'zxf', $Config{GPT_TARBALL};

opendir DIR, '.' or die ".: $!\n";
my @files_after = readdir DIR;
closedir DIR;

my @new_files = ();
foreach my $file (@files_after) {
    push @new_files, $file if not $already_existed{$file};
}

if (scalar @new_files == 0) {
    die "Can't determine GPT source directory, tar didn't create anything\n";
}
elsif (scalar @new_files == 1) {
    my $src_dir = $new_files[0];
    chdir $src_dir or die "$working_dir/$src_dir: $!\n";
}
else {
    die "Can't determine GPT source directory, tar created (@new_files)\n";
}

########################################
# Create the $GPT_LOCATION directory if it doesn't already exist.
# (If it exists it must be empty; this is handled in Get_Config.)
########################################

$ENV{GPT_LOCATION} = $Config{GPT_LOCATION};
if (not -d $Config{GPT_LOCATION}) {
    mkdir $Config{GPT_LOCATION} or die "$Config{GPT_LOCATION}: $!\n";
    chown $installer_uid, $installer_gid, $Config{GPT_LOCATION}
        or die "$Config{GPT_LOCATION}: $!\n";
}

########################################
# Run build-gpt to install GPT
########################################
Execute @As_Installer, './build_gpt';

chdir $working_dir or die "$working_dir: $!\n";

########################################
# <http://www.nsf-middleware.org/documentation/GPT/index.htm>
# says to delete these two files.  They seem to be installed
# if you use the RPM, but not if you use the source tarball.
# So in reality, these files probably won't exist in the first place;
# ignore any errors from unlink().
########################################
unlink '/etc/profile.d/gpt.sh',
       '/etc/profile.d/gpt.csh';

########################################################################
# Confirm GPT installation
########################################################################
Execute @As_Installer, "$Config{GPT_LOCATION}/sbin/gpt-install", '-version';

########################################################################
# Install bundles (presumably Globus et al)
########################################################################

########################################
# Create the $GLOBUS_LOCATION directory if it doesn't already exist.
# (If it exists it must be empty; this is handled in Get_Config.)
########################################
$ENV{GLOBUS_LOCATION} = $Config{GLOBUS_LOCATION};
if ($Config{GLOBUS_LOCATION} ne $Config{GPT_LOCATION}) {
    if (not -d $Config{GLOBUS_LOCATION}) {
        mkdir $Config{GLOBUS_LOCATION} or die "$Config{GLOBUS_LOCATION}: $!\n";
        chown $installer_uid, $installer_gid, $Config{GLOBUS_LOCATION}
            or die "$Config{GLOBUS_LOCATION}: $!\n";
    }
}

########################################
# Run gpt-install or gpt-build to install the bundles.
########################################
my $Installing_kx509 = 0;

foreach my $bundle ( @{$Config{BUNDLES}} ) {
    #
    # If we're installing kx509, we'll need to supply more
    # input to gpt-postinstall.  Ick.
    #
    if ($bundle =~ /^kx509/ or $bundle =~ /^nmi/) {
        $Installing_kx509 = 1;
    }
    if ($bundle =~ /src\.tar\.gz$/) {
        my @options = (); # qw(-install-only);
        my @flavors = ();
        my $bundle_name = File::Basename::basename $bundle;

        if ($bundle_name =~ /^globus/) {
            if ($bundle_name =~ /^globus_(data|resource).*-server/) {
                push @options, '-static=1';
            }
            if ($bundle_name =~ /^globus_information/) {
                push @flavors, "$Config{CC}$Sys{BITS}dbgpthr";
            }
            else {
                push @flavors, "$Config{CC}$Sys{BITS}dbg";
            }
            $flavors[$#flavors] .= 'mpi' if $Config{USE_MPI};
        }
        else {
            push @options, '-std-flavors';
        }
        Execute @As_Installer,
                "$Config{GPT_LOCATION}/sbin/gpt-build",
                @options,
                $bundle,
                @flavors;
    }
    else {
        Execute @As_Installer,
                "$Config{GPT_LOCATION}/sbin/gpt-install",
                $bundle;
    }
}

########################################################################
# Post-installation
########################################################################

########################################
# Run gpt-postinstall.
# Annoyingly, it waits for user input; force-feed it to keep it happy.
# BUILD SCRIPTS SHOULD NOT WAIT FOR USER INPUT!
########################################
my $input_string = "";
$input_string .= "0\n0\nn\n" if $Installing_kx509;
$input_string .= "\n"; # Globus

Execute @As_Installer, "-input=$input_string",
        "$Config{GPT_LOCATION}/sbin/gpt-postinstall";

####################################
# The LDAP certificate and key need to be in $GLOBUS_LOCATION/etc,
# not in /etc/grid-security.  I'm not sure why.
####################################
Backup "$Config{GLOBUS_LOCATION}/etc/server.cert";
Execute @As_Installer,
        'cp', $Config{LDAP_CERT}, "$Config{GLOBUS_LOCATION}/etc/server.cert";
Backup "$Config{GLOBUS_LOCATION}/etc/server.key";
Execute @As_Installer,
        'cp', $Config{LDAP_KEY}, "$Config{GLOBUS_LOCATION}/etc/server.key";
chmod 0400, "$Config{GLOBUS_LOCATION}/etc/server.key";

########################################
# Configure batch jobmanager
########################################

if ($Config{BATCH_SYSTEM} ne 'none') {
    Execute @As_Installer,
        "$Config{GLOBUS_LOCATION}/setup/globus/setup-globus-gram-job-manager",
        "-type=$Config{BATCH_SYSTEM}";
    my $libexec = "$Config{GLOBUS_LOCATION}/libexec";
    push @manual_steps,
         "Fix $Config{GLOBUS_LOCATION}/libexec/" .
         "globus-script-$Config{BATCH_SYSTEM}-* if necessary\n";
}

########################################
# Run setup-gsi to create /etc/grid-security
# (but we're going to replace its contents in a moment).
########################################
if ($Startup) {
    Execute @As_Root, "-input=y\nq\n",
            "$Config{GLOBUS_LOCATION}/setup/globus/setup-gsi";
}
else {
    push @manual_steps,
         "As root, run $Config{GLOBUS_LOCATION}/setup/globus/setup-gsi\n";
}

########################################
# Now copy files to /etc/grid-security.
########################################
if ($Startup) {
    Backup '/etc/grid-security/grid-mapfile';
    Execute @As_Root,
            'cp', $Config{GRID_MAPFILE}, '/etc/grid-security/grid-mapfile';
    chmod 0444, '/etc/grid-security/grid-mapfile';

    Backup '/etc/grid-security/hostcert.pem';
    Execute @As_Root,
            'cp', $Config{HOST_CERT}, '/etc/grid-security/hostcert.pem';
    chmod 0444, '/etc/grid-security/hostcert.pem';

    Backup '/etc/grid-security/hostkey.pem';
    Execute @As_Root,
            'cp', $Config{HOST_KEY}, '/etc/grid-security/hostkey.pem';
    chmod 0400, '/etc/grid-security/hostkey.pem';
}
else {
    push @manual_steps,
         "Set up /etc/grid-security directory.\n" .
         "Create grid-mapfile (444), hostcert.pem (444), hostkey.pem (400),\n" .
         "all owned by root.\n";
}

if ($Startup) {
    my $ca_cert_dir = '/etc/grid-security/certificates';
    Backup $ca_cert_dir;
    mkdir $ca_cert_dir or die "$ca_cert_dir: $!\n";
    chdir $ca_cert_dir or die "$ca_cert_dir: $!\n";
    Execute @As_Root,
            'tar', 'zxf', $Config{CA_CERT_TARBALL};
}
else {
    push @manual_steps,
         "Copy CA certificates and signing-policy files to\n" .
         "/etc/grid-security/certificates\n";
}

if ($Sys{NET_DAEMON} eq 'xinetd') {
    my $xinetd_dir = '/etc/xinetd.d';
    if (not -d $xinetd_dir) {
        push @manual_steps,
             "You seem to be running xinetd, but there is " .
             "no $xinetd_dir directory.\n" .
             "Your humble installation script is confused.\n" .
             "You're on your own.\n";
    }
    else {
        if ($Startup) {
            my $file1 = "$xinetd_dir/gsigatekeeper";
            Backup $file1;
            open FILE, "> $file1" or die "${file1}: $!\n";
            print FILE Inet_Config_Text 'xinetd', 'gsigatekeeper';

            my $file2 = "$xinetd_dir/gsiftp";
            Backup $file2;
            open FILE, "> $file2" or die "${file2}: $!\n";
            print FILE Inet_Config_Text 'xinetd', 'gsiftp';
            Execute @As_Root, qw(/etc/init.d/xinetd reload);
        }
        else {
            push @manual_steps,
                 "Set up xinetd scripts for gsigatekeeper and gsiftp\n";
        }
    }
}
else {
    #
    # For inetd, we need to update /etc/inetd.conf.
    # Since this involves editing an existing file (which requires
    # some care about its previous contents), and some sites might
    # want to use things like tcpd, we'll let the user do this manually.
    #
    my $update = "Update /etc/inetd.conf:\n";

    $update .= "gsigatekeeper:\n";
    $update .= "gsigatekeeper   stream tcp nowait root " .
               "$Config{GLOBUS_LOCATION}/sbin/globus-gatekeeper " .
               "globus-gatekeeper " .
               "-conf $Config{GLOBUS_LOCATION}/etc/globus-gatekeeper.conf\n";

    $update .= "gsiftp:\n";
    $update .= "gsiftp  stream  tcp     nowait  root    " .
               "$Config{GLOBUS_LOCATION}/sbin/in.ftpd in.ftpd -l -a";

    $update .= "Allow for any site-specific conventions for /etc/inetd.conf\n";

    $update .= "Execute as root \"$Sys{NET_DAEMON_RELOAD}\"\n";
    push @manual_steps, $update;
}

push @manual_steps,
     "Make sure that certain parts of the Globus installation, particularly\n" .
     "the var directory, are on a local file system\n";

if ($Startup) {
    Execute @As_Installer,
            "$Config{GLOBUS_LOCATION}/sbin/SXXgris", 'start';
}
else {
    push @manual_steps,
         "As $Config{INSTALLER_USER} run " .
         "$Config{GLOBUS_LOCATION}/sbin/SXXgris start\n";
}
push @manual_steps,
     "Arrange for \"$Config{GLOBUS_LOCATION}/sbin/SXXgris start\"\n" .
     "to be executed by user \"$Config{INSTALLER_USER}\" on system boot\n";

push @manual_steps,
     "Start any other desired services\n";

push @manual_steps,
     "Configure to report to a GIIS server if desired\n";

chdir '/tmp';
if ($Cleanup) {
    Execute @As_Root, 'rm', '-rf', $working_dir;
}

########################################################################
# Some things can't be easily automated, some things shouldn't be
# automated, and some things I just haven't gotten around to automating
# yet.  Tell the user what still needs to be done manally.  All these
# things are collected and printed in one well-marked block at the end
# of the log.
########################################################################
print '*' x 72, "\n";
print ">>> To be done manually:\n";
print join "\n", @manual_steps;
print '*' x 72, "\n";

print Time_Image time, "\n";

########################################################################
# Subroutines
########################################################################

#
# Extract the actual revision number from an RCS revision string.
# The code is a little convoluted to prevent RCS from stepping on
# the search pattern.
#
sub Strip_Revision_String($) {
    my($revision) = @_;
    my $rev_tag = '\$' . 'Revision:';
    if ($revision =~ /^$rev_tag ([\d.]+) \$$/) {
        return $1;
    }
    else {
        return $revision;
    }
} # Strip_Revision_String

# ----------------------------------------------------------------------

#
# Read and parse the config file (name given on the command line) and
# return the results as a hash (to be assigned to the global %Config).
#
sub Get_Config($) {
    my %Result = ();
    my($config_file) = @_;

    print "Getting configuration from $config_file\n";

    my %count = ( CONFIG_FILE_REVISION => 0,

                  TEMP_DIR             => 0,
                  PATH                 => 0,
                  INSTALLER_USER       => 0,
                  INSTALLER_GROUP      => 0,
                  UMASK                => 0,

                  CC                   => 0,
                  USE_MPI              => 0,

                  GPT_TARBALL          => 0,
                  BUNDLES              => 0,

                  GPT_LOCATION         => 0,
                  GLOBUS_LOCATION      => 0,

                  GRID_MAPFILE         => 0,
                  HOST_CERT            => 0,
                  HOST_KEY             => 0,
                  LDAP_CERT            => 0,
                  LDAP_KEY             => 0,

                  BATCH_SYSTEM         => 0,

                  CA_CERT_TARBALL      => 0 );

    open CONFIG, $config_file or die "$config_file: $!\n";
    while (<CONFIG>) {
        s/#.*$//;
        s/^\s+//;
        s/\s+$//;
        next if /^$/;
        if (/^(\w+)\s*(.*)$/) {
            my ($name, $value) = ($1, $2);
            if (defined $count{$name}) {
                if ($count{$name} == 0) {
                    #
                    # First time we've seen this variable; just set it.
                    #
                    $Result{$name} = $value;
                }
                else {
                    #
                    # We've seen this variable before; append value to
                    # referenced array.
                    #
                    if ($count{$name} == 1) {
                        #
                        # Convert from simple scalar to array reference.
                        #
                        $Result{$name} = [ $Result{$name} ];
                    }
                    push @{$Result{$name}}, $value;
                }
                $count{$name} ++;
            }
            else {
                die "Unrecognized option in $config_file at line $.\n";
            }
        }
        else {
            die "Syntax error in $config_file at line $.\n";
        }
    }
    close CONFIG;

    my @missing = ();
    my @extra = ();
    foreach my $option (sort keys %count) {
        if ($count{$option} == 0) {
            push @missing, $option;
        }
        elsif ($count{$option} > 1) {
            push @extra, $option if $option ne 'BUNDLES';
        }
    }

    if (@missing or @extra) {
        my @errors = ( ">>> Bad config file $config_file\n" );
        foreach (@missing) {
            push @errors, "    Missing option $_\n";
        }
        foreach (@extra) {
            push @errors, "    Multiply specified option $_\n";
        }
        die @errors;
    }

    $Result{CONFIG_FILE_REVISION}
        = Strip_Revision_String $Result{CONFIG_FILE_REVISION};

    #
    # BATCH_SYSTEM is case-insensitive; map to lower case.
    #
    $Result{BATCH_SYSTEM} = lc $Result{BATCH_SYSTEM};

    foreach my $key (sort keys %Result) {
        my $value = $Result{$key};
        if (ref $value eq 'ARRAY') {
            printf "    %-20s => {\n", $key;
            foreach my $elem (@$value) {
                print "        \"$elem\"\n";
            }
            print "    }\n";
        }
        else {
            printf "    %-20s => \"%s\"\n", $key, $Result{$key};
        }
    }
    return %Result;
} # Get_Config

# ----------------------------------------------------------------------

#
# Collect system information and return it in a hash.
#
sub Get_System_Information() {
    my %Result = ();

    $Result{OSNAME} = lc `uname -s`;
    chomp $Result{OSNAME};
    $Result{MACHINE} = lc `uname -m`;
    chomp $Result{MACHINE};

    if ($Result{MACHINE} eq 'ia64') {
        $Result{BITS} = 64;
    }
    else {
        $Result{BITS} = 32;
    }

    #
    # Detect whether we're running inetd or xinetd, and what its PID is.
    #
    my $ps_command;

    if ($Result{OSNAME} eq 'darwin' or $Result{OSNAME} =~ /bsd/) {
        $ps_command = 'ps -u -U root';
    }
    else {
        $ps_command = 'ps -f -u root';
    }

    my @inetd_processes = ();
    my @xinetd_processes = ();

    open PIPE, "$ps_command |";
    while (<PIPE>) {
        chomp;
        s/^\s*//;
        my @fields = split;
        my $pid = $fields[1];
        if (/\binetd\b/) {
            push @inetd_processes, $pid;
        }
        elsif (/\bxinetd\b/) {
            push @xinetd_processes, $pid;
        }
    }
    close PIPE;

    if (scalar @inetd_processes == 1 and scalar @xinetd_processes == 0) {
        $Result{NET_DAEMON} = 'inetd';
        $Result{NET_DAEMON_PID} = $inetd_processes[0];
        if (-x '/etc/init.d/inet') {
            $Result{NET_DAEMON_RELOAD} = '/etc/init.d/inet reload';
        }
        elsif (-x '/etc/rc.d/init.d/inet') {
            $Result{NET_DAEMON_RELOAD} = '/etc/rc.d/init.d/inet reload';
        }
        else {
            $Result{NET_DAEMON_RELOAD} = "kill -HUP $Result{NET_DAEMON_PID}";
        }
    }
    elsif (scalar @inetd_processes == 0 and scalar @xinetd_processes == 1) {
        $Result{NET_DAEMON} = 'xinetd';
        $Result{NET_DAEMON_PID} = $xinetd_processes[0];
        if (-x '/etc/init.d/xinetd') {
            $Result{NET_DAEMON_RELOAD} = '/etc/init.d/xinetd reload';
        }
        elsif (-x '/etc/rc.d/init.d/xinetd') {
            $Result{NET_DAEMON_RELOAD} = '/etc/rc.d/init.d/xinetd reload';
        }
        else {
            $Result{NET_DAEMON_RELOAD} = '';
        }
    }

    print "System Information:\n";
    foreach my $key (sort keys %Result) {
        my $value = $Result{$key};
        if (ref $value eq 'ARRAY') {
            printf "    %-20s => {\n", $key;
            foreach my $elem (@$value) {
                print "        \"$elem\"\n";
            }
            print "    }\n";
        }
        else {
            printf "    %-20s => \"%s\"\n", $key, $Result{$key};
        }
    }

    return %Result;
} # Get_System_Information

# ----------------------------------------------------------------------

sub Substitute($) {
    my($key) = @_;
    if (defined $Config{$key}) {
        return $Config{$key};
    }
    else {
        die "Unrecognized substitution key: $key\n";
    }
} # Substitute

# ----------------------------------------------------------------------

#
# Given a number of seconds (possibly fractional), return a readable
# string, similar to the format used by the csh "time" builtin command.
#
sub Elapsed_Time_Image($) {
    my($seconds) = @_;

    my $h = int($seconds / 3600);
    $seconds -= 3600 * $h;      # Can't use "%"; it truncates.

    my $m = int($seconds / 60);
    $seconds -= 60 * $m;

    if ($h > 0) {
        return sprintf '%d:%02d:%05.2f', $h, $m, $seconds;
    }
    else {
        return sprintf '%d:%05.2f', $m, $seconds;
    }
} # Elapsed_Time_Image

# ----------------------------------------------------------------------

#
# Given a raw timestamp, return a human-readable string.
# Time zone is UTC, format is basically ISO-8601.
#
sub Time_Image($) {
    my($time) = @_;
    my($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst)
        = gmtime time;
    return sprintf "%s %04d-%02d-%02d %02d:%02d:%02d UTC",
                   (qw(Sun Mon Tue Wed Thu Fri Sat))[$wday],
                   1900+$year, 1+$mon, $mday, $hour, $min, $sec;
} # Time_Image

# ----------------------------------------------------------------------

#
# Create a unique temporary file and return its name.
#
sub Make_Temp_File($) {
    my($content) = @_;
    my $filename = sprintf "$working_dir/input-%03d",
                           $temp_file_serial_number ++;
    open TMP, ">$filename" or die "${filename}: $!\n";
    print TMP $content;
    close TMP;
    return $filename;
} # Make_Temp_File

# ----------------------------------------------------------------------

#
# Given a numeric value returned by system(), interpret it
# and return the result as a hash reference.
# Die if result indicates failure and second argument is true.
#
sub Get_Result($$) {
    my ($status, $check) = @_;
    my $Result = {};
    my $hi_8 = ($status & 0xff00) >> 8;
    my $lo_8 =  $status & 0x00ff;

    my $WSTOPFLG = 0x007f;
    my $WCOREFLG = 0x0080;

    if ($lo_8 == $WSTOPFLG) {
        $Result->{signal} = $hi_8;
        $Result->{stopped} = 1;
        $Result->{desc} = "stopped, signal $hi_8";
        die $Result->{desc} if $check;
    }
    elsif ($lo_8 == 0) {
        $Result->{status} = $hi_8;
        $Result->{desc} = "exit $hi_8";
        die $Result->{desc} if $check and $Result->{status} != 0;
    }
    elsif ($hi_8 == 0) {
        my $signal = $lo_8;
        if ($signal & $WCOREFLG) {
            $signal &= ~$WCOREFLG;
            $Result->{core} = 1;
        }
        $Result->{signal} = $signal;
        $Result->{desc} = "signal $signal";
        if ($Result->{core}) {
            $Result->{desc} .= " (core dumped)";
        }
        die $Result->{desc} if $check;
    }
    return $Result;
} # Get_Result

# ----------------------------------------------------------------------

#
# Execute a command with arguments.
# The command name is preceded by zero or more options starting with '-'.
#
# -verbose      Print command to stdout before executing.
# -time         Like csh "time" command
# -time=N       Show time only if command took at least N wall seconds
# -background   Run command in background; don't wait for completion.
# -check        Die if command fails.
# -user=name    Execute as specified user (and group).
#               Name can be "user", "user.group", or "user:group".
# -stdin=file   Redirect stdin from specified file.
# -input=string Redirect stdin from temp file with specified contents.
#
# 
sub Execute(@) {
    my @args = @_;
    my $Verbose = 0;
    my $Min_Time = undef;
    my $Background = 0;
    my $Check = 0;
    my $User = undef;
    my $Group = undef;
    my $Input_String = undef;
    my $Stdin = undef;
    my $Stdin_Is_Temporary = undef;
    my @before;
    my @after;
    my $system_result;

    Debug "Execute, scalar \@args = ", scalar @args, "\n";
    my @caller = caller;
    Debug "   Called from $caller[0]::$caller[1] line $caller[2]\n";
    #
    # Process arguments
    #
    while ( scalar @args > 0 && $args[0] =~ /^-/) {
        my $arg = shift @args;
        if ($arg eq '-verbose') {
            $Verbose = 1;
        }
        elsif ($arg eq '-time') {
            $Min_Time = 0;
        }
        elsif ($arg =~ /^-time=(\d+)$/) {
            $Min_Time = $1;
        }
        elsif ($arg eq '-background') {
            $Background = 1;
        }
        elsif ($arg eq '-check') {
            $Check = 1;
        }
        elsif ($arg =~ /^-user=(.+)$/) {
            $User = $1;
            if ($User =~ /^(.*)[.:](.*)$/) {
                $User = $1;
                $Group = $2;
            }
        }
        elsif ($arg =~ /^-stdin=(.+)$/) {
            $Stdin = $1;
        }
        elsif ($arg =~ /^-input=(.+)$/s) {
            #
            # Need to use "/s" modifier so "." matches "\n"
            #
            $Input_String = $1;
            $Stdin = Make_Temp_File $Input_String;
            $Stdin_Is_Temporary = 1;
        }
        else {
            die "Execute: Unrecognized argument: $arg\n";
        }
    }

    Debug "   args = @args\n";
    if (defined $User) {
        my @pw = getpwnam $User;
        die "${User}: No such user\n" if not @pw;
        my @gr;
        if (defined $Group) {
            @gr = getgrnam $Group;
            die "${Group}: No such group\n" if not @gr;
        }
        my $uid = $pw[2];
        my $gid = defined $Group ? $gr[2] : $pw[3];
        my $pid;
        if (($pid = fork) == 0) {
            #
            # This is the child process.
            # Set the real and effective user (and group) id,
            # and continue to handle the call.
            #
            # To be honest, I don't quite understand the distinction
            # between "real" and "effective" user and group ids, so I
            # set both just to be sure.
            #
            # It may be possible to temporarily set the effective(?) user
            # and group ids, run the command, and set them back, without
            # forking a child process, but it doesn't seem to be possible
            # to do this in a portable and reliable manner.
            #
            # Set the group ids first; once we set the user ids, we're no
            # longer root and don't have permission to set the group ids.
            #
            if (defined $gid) {
                $( = $gid;
                $) = $gid;
            }
            $< = $uid;
            $> = $uid;
            Debug "Child: \$< = $< \$> = $>\n";
            delete $SIG{__DIE__};
        }
        else {
            #
            # This is the parent process.
            # Wait for the child to finish.  
            #
            Debug "Parent calling waitpid\n";
            if (waitpid $pid, 0 == -1) {
                Debug ">>> waitpid returned -1, \$? = $?, \$! = $!\n",
                      "    Ignoring error (ick)\n";
                # die "waitpid ${pid}: $! (\$? = $?)\n";
            }
            Debug "Parent after waitpid, \$? = $?\n";
            return Get_Result $?, $Check;
        }
    }

    if ($Verbose) {
        Debug "Building command_string, args = @args\n";
        my $command_string = '% ';
        $command_string .= "[$User] " if defined $User;
        $command_string .= "@args";
        $command_string .= " < $Stdin" if defined $Stdin;
        $command_string .= " &" if $Background;
        print "$command_string\n";
        if (defined $Input_String) {
            print "  (input is ", Image $Input_String, ")\n";
        }
    }

    if ($Background) {
        my $pid = fork;
        if ($pid != 0) {
            #
            # I'm the parent
            #
            my $Result = {};
            $Result->{pid} = $pid;
            return $Result;
        }
    }

    if (defined $Stdin) {
        open SAVE_STDIN, "<&STDIN";
        print SAVE_STDIN if 0;          # keep "perl -w" happy
        close STDIN;
        open STDIN, "<$Stdin" or die "${Stdin}: $!\n";
    }
    if (defined $Min_Time) {
        @before = POSIX::times;
    }
    $system_result = system @args;
    Debug "system_result = $system_result\n";
    if (defined $Min_Time) {
        @after = POSIX::times();
    }
    if (defined $Stdin) {
        open STDIN, "<&SAVE_STDIN";
        unlink $Stdin if $Stdin_Is_Temporary;
    }

    #
    # Emulate csh "time" command
    #
    if (defined $Min_Time) {
        my $elapsed_ticks    =  $after[0] - $before[0];
        my $user_CPU_ticks   = ($after[1] - $before[1]) +   # this process
                               ($after[3] - $before[3]);    # child processes
        my $system_CPU_ticks = ($after[2] - $before[2]) +   # this process
                               ($after[4] - $before[4]);    # child processes

        my $percent_usage;
        if ($elapsed_ticks == 0) {
            $percent_usage = 0.0;
        }
        else {
            $percent_usage = ($user_CPU_ticks + $system_CPU_ticks)
                             / $elapsed_ticks * 100;
        }

        my $elapsed_seconds    = $elapsed_ticks    / $CLK_TCK;
        my $user_CPU_seconds   = $user_CPU_ticks   / $CLK_TCK;
        my $system_CPU_seconds = $system_CPU_ticks / $CLK_TCK;

        if ($elapsed_seconds >= $Min_Time) {
            printf "%.2fu %.2fs %s %.1f%%\n",
                   $user_CPU_seconds,
                   $system_CPU_seconds,
                   Elapsed_Time_Image $elapsed_seconds,
                   $percent_usage;
        }
    }
    if ($Background) {
        exit;
    }
    elsif (defined $User) {
        #
        # This is the child process; bail out and let the parent handle
        # the consequences.  Try to arrange for $? after the parent's
        # call to waitpid to match what it would have been if the parent
        # had called system.
        #
        my $Result = Get_Result $system_result, 0;
        if (defined $Result->{signal}) {
            Debug "Child: kill $Result->{signal}, $$\n";
            kill $Result->{signal}, $$;
        }
        else {
            Debug "Child: exit $Result->{status}\n";
            exit $Result->{status};
        }
    }

    return Get_Result $system_result, $Check;
} # Execute

# ----------------------------------------------------------------------

#
# Perform some checks on the configuration variables.
#
sub Check_Config_Vars() {
    my @errors = ();

    my @batch_systems = qw( condor easymcs fork glunix grd loadleveler
                            lsf nqe nswc pbs pexec prun );
    my %is_batch_system = map { ( $_ => 1 ) } @batch_systems;

    if ($Config{BATCH_SYSTEM} ne 'none' and
        not $is_batch_system{$Config{BATCH_SYSTEM}})
    {
        push @errors, "BATCH_SYSTEM must be \"none\" or one of:\n" .
                      "    @batch_systems\n";
    }

    if ($Config{CC} ne 'gcc' and $Config{CC} ne 'vendorcc') {
        push @errors, "CC must be \"gcc\" or \"vendorcc\"\n";
    }

    if ($Config{USE_MPI} ne '0' and $Config{USE_MPI} ne '1') {
        push @errors, "USE_MPI must be \"0\" or \"1\"\n";
    }

    if (not (-d $Config{TEMP_DIR} and -w _)) {
        push @errors, "Bad TEMP_DIR directory \"$Config{TEMP_DIR}\n";
    }

    foreach my $key (qw(GPT_TARBALL
                        GRID_MAPFILE
                        HOST_CERT HOST_KEY
                        LDAP_CERT LDAP_KEY
                        CA_CERT_TARBALL))
    {
        if (not (-f $Config{$key} and -r _)) {
            push @errors, "Can't read $key file \"$Config{$key}\"\n";
        }
    }
    foreach my $bundle (@{$Config{BUNDLES}}) {
        if (not (-f $bundle and -r _)) {
            push @errors, "Can't read bundle file $bundle\n";
        }
    }

    foreach my $key (qw(GPT_LOCATION GLOBUS_LOCATION)) {
        my $dir = $Config{$key};
        if (-e $dir) {
            if (-d $dir) {
                opendir DIR, $dir or die "${dir}: $!\n";
                my @files = grep { $_ ne '.' and $_ ne '..' } readdir DIR;
                closedir DIR;
                if (@files) {
                    push @errors,
                         "$key \"$dir\" already exists and is not empty\n";
                }
            }
            else {
                push @errors,
                     "$key \"$dir\" already exists and is not a directory\n";
            }
        }
    }
    
    if (@errors) {
        die ">>> Error(s) in config file ${Config_File}:\n", @errors;
    }
} # Check_Config_Vars

# ----------------------------------------------------------------------

#
# Confirm that the necessary services are specified in
# /etc/services (or the NIS equivalent).
#
sub Check_Services() {
    my %expected_name = ( 2119 => 'gsigatekeeper',
                          2135 => 'gris',
                          2811 => 'gsiftp' );
    my @errors = ();
    foreach my $port (sort keys %expected_name) {
        my @serv = getservbyport $port, 'tcp';
        if (not @serv) {
            push @errors,
                 "    No service on port $port, " .
                 "expected $expected_name{$port}\n";
        }
        elsif ($serv[0] ne $expected_name{$port}) {
            push @errors,
                 "    Service on port $port is \"$serv[0]\", ",
                  "should be \"$expected_name{$port}\"\n";
        }
    }
    if (@errors) {
        push @manual_steps,
             "Correct /etc/services or equivalent:\n" .
             join('', @errors);
    }
} # Check_Services

# ----------------------------------------------------------------------

#
# Calls to die() cause this function to be called before exiting.
# Clean up temporary directory.
#
sub Die_Handler($) {
    if ($Cleanup and defined $working_dir) {
        print ">>> Cleaning up\n";
        chdir '/tmp';
        Execute @As_Root, 'rm', '-rf', $working_dir;
    }
    print Time_Image time, "\n";
} # Die_Handler

# ----------------------------------------------------------------------

#
# Given a time, return an ASCII UTC timestamp suitable for use
# in a file name, such as "2002-08-16-183304".
#
sub Timestamp_Of($) {
    my($time) = @_;
    my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) =
        gmtime($time);
    return sprintf "%04d-%02d-%02d-%02d%02d%02d",
                   $year + 1900, $mon + 1, $mday, $hour, $min, $sec;
} # Timestamp_Of

# ----------------------------------------------------------------------

#
# Rename the specified file by appending its last modification time to
# its name.  Do nothing if file doesn't exist.  May be used on directories
# as well as ordinary files.
#
sub Backup($) {
    my($filename) = @_;
    my @stat;

    return if not -e $filename;
    @stat = stat $filename or die "${filename}: $!\n";
    my $timestamp = Timestamp_Of $stat[9]; # mtime
    my $new_name = "$filename-$timestamp";
    rename $filename, $new_name or die "$new_name: $!\n";
} # Backup

# ----------------------------------------------------------------------

sub Test_File_Creation() {
    print ">>> File creation test\n";
    print "\$<=$< \$>=$> \$(=\"$(\" \$)=\"$)\"\n";
    my $file1 = "$working_dir/test-file-1";
    my $file2 = "$working_dir/test-file-2";
    open FILE1, ">$file1";
    close FILE1;
    system 'touch', $file2;
    system 'ls', '-lsF', $file1, $file2;
    unlink $file1, $file2;
} # Test_File_Creation

# ----------------------------------------------------------------------

sub Inet_Config_Text($$) {
    my($daemon, $service) = @_;

    if ("$daemon/$service" eq 'xinetd/gsigatekeeper') {
        return <<"EOF";
service gsigatekeeper
{
    socket_type  = stream
    protocol     = tcp
    wait         = no
    user         = root
    server       = $Config{GLOBUS_LOCATION}/sbin/globus-gatekeeper
    server_args  = -conf $Config{GLOBUS_LOCATION}/etc/globus-gatekeeper.conf
    disable      = no
}
EOF
    }
    elsif ("$daemon/$service" eq 'xinetd/gsiftp') {
        return <<"EOF";
service gsiftp
{
    instances               = 1000
    socket_type             = stream
    wait                    = no
    user                    = root
    server                  = $Config{GLOBUS_LOCATION}/sbin/in.ftpd
    server_args             = -l -a -G /usr/nmi
    log_on_success         += DURATION USERID
    log_on_failure         += USERID
    nice                    = 10
    disable                 = no
}
EOF
    }
    elsif ("$daemon/$service" eq 'inetd/gsigatekeeper') {
        return "gsigatekeeper   stream tcp nowait root " .
               "$Config{GLOBUS_LOCATION}/sbin/globus-gatekeeper " .
               "globus-gatekeeper " .
               "-conf $Config{GLOBUS_LOCATION}/etc/globus-gatekeeper.conf\n";
    }
    elsif ("$daemon/$service" eq 'inetd/gsiftp') {
        return "gsiftp  stream  tcp     nowait  root    " .
               "$Config{GLOBUS_LOCATION}/sbin/in.ftpd in.ftpd -l -a\n";
    }
    else {
        die "Internal error, bad arguments to Inet_Config_Text()\n" .
            "    daemon=\"$daemon\", service=\"$service\"\n";
    }
} # Inet_Config_Text

# ----------------------------------------------------------------------

sub Image($) {
    my($arg) = @_;
    if (defined $arg) {
        $arg =~ s/\n/\\n/g;
        return "\"$arg\"";
    }
    else {
        return 'undef';
    }
} # Image

# ----------------------------------------------------------------------

sub Debug(@) {
    print @_ if $Debugging;
} # Debug

# ----------------------------------------------------------------------

sub Usage(@) {
    print @_ if @_;
    print <<"EOF";
Usage: $Prog_Name [options] config_file
    -help      : Display this message and exit
    -cleanup   : Delete temporary directory on completion (default)
    -nocleanup : Do not delete temporary directory
    -startup   : Update system files and start services (default)
    -nostartup : Do not update system files or start services
    -debugging : Enable debugging
EOF
    exit 1;
} # Usage
